What Is JavaScript :
    js is a open source object oriented programming language .which is used for making the webpage dynamic
    advantages :
        -> javascript is a Dynamic typed language (we dont define variable as which type explicitly like in c and java etc)
        -> Saves time and bandwidth: Regardless of where you host JavaScript, it always gets executed on the client environment to save lots of bandwidth and make the execution process fast.
        -> Reduce load on the server :  Data validation can be done within the browser itself rather than being forwarded to the server 



    input -------> Computer ---------> output 
    

JavaScript can be written inside console which is present inside the browser 
    there we can write console.log("hello javascript");

    or the best option create a js folder and write javascript inside a file extension name should be .js
    and create an other file in the same location as . html extension then link the js file to the .html file and run the .html file in the browser
______________________________________________
Chapter 2 :                                   |
______________________________________________|

    ( Variable )
-----------------------
    Variable are container for the data , where we can keep our data it could be change later 
    we can give variable name as or wish but as a good programer our variable name should be meaningful 


    difference between null and undefined :
        undefined : dont know what is inside the container.
        null : the container is empty but we know the container is empty

    rule for define variable:
    -------------------------   
        -> javascript variable are case sensitive: "a" and "A" is different
            apple is differnt from Apple
        -> Only letter ,digit,$ and underscore (_) are allowed (not even a space )
        -> Only letter , digit , $ or underscore(_) should be first letter of variable
        -> reserved words cant be variable name .

        one Convension :
            camelCase :
                like : fullName , lastName ,isFollow, totalPrice  etc 

    we cant always  declare variable in this form of age = 45 not like this .
    we can use var , let , const keyword

    -> var variable can be declared and updated . it is a global scope variable 

        var age  = 22
        var age =45
        var age = 67
        console.log(age)
        here we can re-declarea and update 
    -> let : variable cant be re-declared but can be updated . A block scope variable 

        let age  = 66
        age = 77
        console.log(age)
        here we ant re-declare but we can update the same variable 

        {
            let a = 5 ;
            console.log(a);
        }
        {
            let a = 10;
            console.log(a);
            }

    -> const : variable cannot be re-declared or updated . A block scope variable
        const age  = 66 ;
        // age = 88;
        console.log(age);
        it cant be re-declare or update 

    before 2015 we are using var keyword but after ES6 (ekma script 6) came to market  from there let and const came 

    let a ;
    console.log(a)

    if you defined a vriable didnot stored anything bydefault it will consider as undefined 

    but not the same with const keyword 
    const a ;
    console.log(a)
    you will get an error message 

        right form you have to initialize the const variable at the time of declaration 




    __________________________
    | Chapter 3 --> DataType :|
    |_________________________|

        Number ,String , Boolean, undefined , Null , Bigint , Symbol

        Primitive :
            7 datatype are present :
            Number ,String , Boolean, undefined , Null , BigInt , Symbol

            let age = 24;  //number 
            price = 66.89;  //number 
            discount = -4;  //number 
            fullName = " Tony Stark" ; //string 
            isFollow =true; //Boolean
            let area  ; //Undefined ( where the value is not defined )
            let x = null; // object ( there should be a object but now it is null)
            let b = BigInt("123"); // bigint //output will come like "123n"
            let y = Symbol("hello") //symbol

        NonPrimitive : objects --> (aray and function)  
            object : it is a collection of values
                if you want to store stuent information
                    like name = string type 
                        age = number type 
                        marks = number type 
                        isPass = boolean type 

                        it represent {
                                age : 23
                                name : "Binod"
                        }

                        generally we define object in const example : 
                        const Student = {
                            fullName : "Rahul Kumar",
                            age : 23,
                            cgpa : 8.2,
                            isPass : true
                        };
                        console.log(Student)
                        if you want to print the name of Student 
                        console.log(Student['fullName'])
                        console.log(Student.fullName)

    example :
        fullName = "Rahul Kumar";
        here fullName is key and Rahul Kumar is value
        in js we have two way to access the keys   
            -> object.keyname
            -> object['keyname']

            -> Student.fullName
            -> Student['fullName']

    To modify or Update the value of any key we can do like this 
        example :
            const Student = {
                fullName: "Rahul Kumar",
                age: 23,
                cgpa: 8.2,
                isPass: true
            };
            Student['age'] = Student['age'] + 1;
            Student['fullName'] = "Binod Kumar";
            console.log(Student.age);
            console.log(Student.fullName);
            

    we cant change the variable which declared wth const keyword but inthe case of object we can change the keys inside the object which is declared with const keyword 



Practice Questions :
-----------------------
1. Create a const object called "product" to store the information.

    const product = {
        title : "Ball Pen",
        rating : 4,
        offer : 5,
        price : 270
    };
    console.log(product.title);
    console.log(product.rating);
    console.log(product.offer);
    console.log(product.price);

2. Create a const object called 'profile' to store information.
    const profile = {
        userName : "Binod Kumar Kar",
        bio : " Student , Vollyball player ",
        posts : 186,
        following : 36,
        followers : 39
    };
    console.log(profile.followers);
    console.log(typeof(profile['bio']));// checking the type of key inside the object 


|--------------------------------------------------|
| Chapter 3 Operator and Conditional Statement  :  |
|--------------------------------------------------|

Comments in js :
---------------
    // This code prints hello world  single line comment 
    /*This is the code 
    which prints hello world */ Multiline comment 

Operator In JS:
----------------
    used to perform some operation on data
    type :
        Arithmetic operator , Asignment operator  

    Arithmetic operator :
    ---------------------
        ( +,-,*,/ )

        a + b (Expression )
        here a and b are operands 
        + is a operator here 

        example Code :
        // Arithmetic operator 
        let a = 5;
        let b = 3;
        console.log("a = ",a," &  b = ",b);
        console.log("a + b = ",a + b);
        console.log("a - b = ",a - b);
        console.log("a x b = ",a * b);
        console.log("a / b = ",a / b);

        Modulus : (%)
------------------------------------- 
            it is the operator which devide the operands and prints the reminder 
        lets example 5 % 2 = 1 because the reminder is 1

        console.log("a % b = ",a % b);

        Exponentiation :
--------------------------------------
            console.log("a ** b = ",a ** b); // a to the power b means 5 to the power 3 = 5 * 5 * 5 = 125 

In js we have two unary operator : ( increment , Decrement ) :
    unary operator means the oprator which takes only one operands 

        Incriment :(++) (post):
            it will print first then it will change the value from the next line  
-----------------------------------------
        if i write  a++ means  a + 1 
                    a-- means  a - 1
        
        code Example :
            console.log("a = ",a," &  b = ",b);
            // a = a + 1; (Uncomment the commented part and try )
            a++
            a--
            console.log(" a = ",a)
        
        code example 2:
            let a = 5;
            let b = 3;
            console.log("a = ",a," &  b = ",b);
            console.log("a++ = ",a++); //5
            console.log("after incrementing the value of a = ",a); //6

        two way we can declare ++ like 
        -> a++ ( we have seen before) ( called Post Increment )
        -> ++a ( valid ) ( called pre Incriment )
        same for the minus (- like a--,--a , called post decrement , post decrement )

        ++a :(preincrement ):
        ---------------------
            it will first change the value then prints
            code Example :
            let a = 5;
            let b = 3;
            console.log("a = ",a," &  b = ",b);
            console.log("++a = ",++a); 

            same for derement :
            pre decrement :
            --------------
            code Example :
                let a = 5 ;
                let b = 3;
                console.log("a = ",a," &  b = ",b);
                console.log("--a = ",--a);
                console.log("after incrementing the value of a = ",a);

            post decrement :
            code Example:
                console.log("a = ",a," &  b = ",b);
                console.log("a-- = ",a--); 
                console.log("after incrementing the value of a = ",a);

    Assignment Operator :
    ----------------------
    =   +=   -=   *=   %=   **=  /=

    ( = ) : operator :
    -------------------
    it asign the value left = right , right value store in left variable 

    += ( operator ):
    ------------------
    code example :

    let a = 5;
    let b = 3;
    a += 4 ; // a = a + 4
    console.log("a = ",a);

    like this all 
    
    code Example :

        let a = 5;
        let b = 3;

        // a += 4 ; // a = a + 4
        // console.log("a = ",a);

        // a -= 4 ; // a = a - 4
        // console.log("a = ",a);

        // a *= 4 ; // a = a * 4
        // console.log("a = ",a);

        // a /= 4 ; // a = a / 4
        // console.log("a = ",a);

        // a %= 4 ; // a = a % 4
        // console.log("a = ",a);

        a **= 4 ; // a = a ** 4
        console.log("a = ",a);


Comparision operator :
-----------------------
    -> equal to ==
    -> not equal to !=
    -> equal to and type ===
    -> Not equal&type !==
    > , >= , < , <= 

    it compare the values of two variable
     
     == ( equal to ) : 
     --------------------
     it compare the value is equal to other value or not if equal it return true  
     code example :
        let a = 5;
        let b = 3;
        console.log("5 == 3 ",a==b);
    
    != (not equal to ):
    ----------------------
        it check the two value are equal or not if equal it return false  
        console.log("5 != 5",5 != 5 );
        console.log("5 != 2",5 != 2 );

    === equal to & type :
    --------------------
    let a = 5; // number 
    let b = "5";//string ---> number 

    console.log("a == b ",a==b);
    // it is showing the true because the javascript converts this string 5 to number 5 and then checks.


    but there are some case we dont want that string and number compare equally that time this we use stricter version of equal to ("===") operator came to action .

    -> it checks the datatype of the variable

    code example:
        let a = 5; // number 
        let b = "5";//string 

        console.log("a === b ",a===b); //false
        // it checks datatype as well a jas number data and b has string data so they both are not equal .

    >,>= <,<=
    -----------
        code example :
            let a = 5;  
            let b = 3;
            let c = 5

            console.log("a < b ",a < b); 
            console.log("a > b ",a > b); 
            console.log("a <= b ",a <= c); 
            console.log("a >= b ",a >= b); 



Logical Operator:
------------------
    -> logical AND &&
    -> Logical OR ||
    -> Logical NOT !

    its outcome always in true or false .

    logical AND &&;
    -------------- 
    if we have two condition one is true and condition two is also true  the final answer will true other wise it will return false 

    code example :
        // Logical AND &&

        let a = 6;
        let b= 5;

        let cond1 = a > b ; //true 
        let cond2 = a === 6 ; //true 

        console.log(cond1 && cond2)    

    code example 2 :
        // Logical AND &&

        let a = 6;
        let b= 5;

        let cond1 = a > b ; //true 
        let cond2 = a == 5 ; //true 

        console.log(cond1 && cond2) 

        Table : Logical AND && 

            cond_1          cond_2          final output
            -------         ------          --------------
            true            true            true
            true            false           false
            false           true            false 
            false           false           false



    Loical OR ||: this symbol called pipein our keyboard
    --------------
        if any condition became true then it will return true .

        Table :

        cond_1          cond_2          final output
            -------         ------          --------------
            true            true            true
            true            false           true
            false           true            true 
            false           false           false

        code example :

        let a = 6;
        let b= 5;

        console.log(" condition1 || condition2 " , a < b || a === 6);
        console.log(" condition1 || condition2 " , a < b || a === 8);

    Logical Not (!):
    -----------------
        if the condition is true then it will make it false
        and viceversa

        code example:
            let a = 6;
            let b= 5;

            console.log("6 < 5 ",!(a < b) );
            // 6 is lessthan 5 is false statement but ! makes it true 



Conditional Statement :
-------------------------
    To Implement some condition in the code 

    if statement ,

    if statement :
    --------------
    Syntax: ( syntax means rule )
        if ( condition){
            code 
        }

        if the statement is true then the code inside the block will get execute otherwise it will not 

        code example :
            let age = 18;
            if (age >= 18 ){
                console.log("you can vote ");
            }
            if (age < 18 ){
                console.log("you cant vote ");
            }
        
        code example 2:
            let mode = "dark";
            let color ;
            if (mode === "dark"){
                color = "Black";
            }
            if (mode === 'light'){
                color = "White";
            }
            console.log(color)

    if else statement :
    ------------------
        Syntax :
            if (condition){
                code 
            } else{
                code 
            }
        
    if the statement is true then if block will get execute otherwise the else block will get execute 

    code example :
        let mode = "light";
        let color ;
        if (mode === "dark"){
            color = "Black";
        } else{
            color = "white"
        }
        console.log(color)

    code example 2 :
        let age = 29;
        if (age >= 18){
            console.log("vote");
        }
        else{
            console.log("cant vote ");
        }

Q. write a program to check the number is odd or even :

    let number = 21 ;
    if (number % 2 == 0 ){
        console.log(number ," is an even number ");
    }
    else{
        console.log(number ," is an odd number ");
    }

    else if statement:
    -------------------
        Some time we have to check the morethan two condition that time else if came to action 

        code example :
            let age = 43;
            if (age < 18 ){
                console.log("Minor");
            } else if (age >= 60 ) {
                console.log("Senior");
            } else{
                console.log("adult");
            }
        code example 2 :
        --------------
            let mode = "dark";
            let color ;
            if (mode === "dark" ){
                color = "black";
            } else if (mode === "blue"){
                color = "blue";
            }else if ( mode === "pink"){
                color = "pink";
            }
            else{
                color = "white";
            }

            console.log(color)

            if (mode === "dark"){
                console.log(mode)
            }

    Ternary operator :
    ------------------
    -> it is the special operator which takes three input from them one is condition other two are output 

    -> it is the alternate way to write if else statement.
    -> Syntax :
            condition ? true output : false output 
            or
            condition ? if block : else block

        code example :
            let age = 18;
            age >= 18 ? console.log("adult") : console.log("minor") ;

            let age = 18;
            let result = age >= 18 ? "adult" : "minor";
            console.log(result)

_____________________________________________________________
IMPORTANT :

    MDN Docs :
    ---------
        it is the documentation written by the developer of mozila 
        inside the website there is free documentation for css , HTML, javascript , you can take as reference 

        link :  https://developer.mozilla.org/en-US/

        or you can simple search mdn docs in google you will find the "MDN Web Docs"
_____________________________________________________________

except the ifelse we have another way to check the conditions 
that is :

    Switch Case :
    -------------
        Syntax :
            Switch (condition){
                case :
                    code
                    break;
            }


        code example :
            let Item = "Pumpkins";
            switch (Item){
                case "Oranges":
                    console.log(" Oranges are 74.56 rupees per kg ");
                    break;
                case "Mangos":
                case "Papayas":
                    console.log("Mangos and Papayas are 34.23 rupees per kg ");
                    break;
                default:
                    console.log("Sorry, We are out of ",Item)
            }
    
    prompt and alert 
    ----------------
        alert :
        ---------
            gives us one time popup message 
        code example :
            alert("hello"); // one time popup

        prompt:
        --------
        ->    it gives you the message, but along with message it can take input also and we can store that input in a variable.

        -> it is the temporary way to take input from the user.

        code example :
            let fullName = prompt ( "hello");
            console.log(fullName);


Practice Question :
    Q1 : Get User to input the number using prompt ("Enter a number: "), check the number is multiple of 5 or not ?

    code example:
        let number = prompt("Enter a number : ");
        if (number % 5 === 0 ){
            console.log('Yes ,', number ,'is multiple of five');
        } else {
            console.log('No ,', number ,'is not multiple of five');
        }
    
    Q2 : Write a program which can give grades to student according their score .
        90 - 100  Grade A
        70 - 89  Grade B
        60 - 69  Grade C
        50 - 59  Grade D
        0 - 49  Grade F

    code example:
        let score = prompt("Enter Student Score [0 to 100]: ");
        let grade ;
        if (score >= 90 && score <= 100){
            grade = "A";
        } else if (score >= 70 && score <= 89){
            grade = "B";
        } else if (score >= 60 && score <= 69){
            grade = "C";
        } else if (score >= 50 && score <= 59){
            grade = "D";
        } else if (score >= 0 && score <= 49){
            grade = "F";
        }
        console.log('According to Your score your grade is ',grade);

----------------------------------------------------------------------------------------------------------------------------------------------
__________________________|
Chapter 4 Loop and String |
__________________________| 

    Loops :
    -------
        Loops are used to execute a piece of code again and again 

    for Loop :
    ------------
        Syntax :
            for ( initialization ; condition ; increment or decrement )
            {
                code 
            }
    Understand the loop in a example :

    suppose you have a task to print your name 5 times in the screen , now what you will do ,
    you will write console.log("your name ");
    like this you will copy it 5 times but if you have to print the name for 10000 times then it is quite hard to copy all this for 10000 times in this case 
    loop plays important role .

    when the for loop condition get false the the loop terminate then and there 

    code example:
    ----------------
        let fullName = "binod kumar";
        for (let count = 1 ; count <= 10 ; count++){
            console.log(fullName);
        }
        console.log("loop has ended ");

    code example :
    ----------------
        write a code for calculate the sum of 1 to 10 :

        let sum = 0 ;
        for (let number = 1 ; number <= 10 ; number++){
            sum += number ; // sum = sum + number ;
        }
        console.log("sum of 1 to 10 is ",sum);

        here if you want to print the number outside of the loop then it will show you an error because the variable number declared by let keyword inside the loop , thus it is limited inside the loop only ,
        incase if you declare number with var variable thenit become global , you can access anywhere in that file .


    Infinite Loop : A loop that never ends.
    ---------------------------------------
        when the stoping condition never false then it become Infinite loop 

        you should never try !

    While loop :
    -------------
        Syntax :
            while (stopping condition){
                code 
            }

        code example :

            let number = 1 ;
            while (number <=5 ){
                console.log(number);
                number += 1;
            }

    do while loop :
    --------------
        Syntax :
            do {
                code 
            }while(condition);

    there is a guarenty that the dowhile loop run atleast onetime 
    because we are writing the  stopping code at the end of loop

    code example:
        let number = 10;
        do {
            console.log(number);
            number -= 1;
        }while(number >= 0);
    

    for of loop :
    -------------
        Syntax :
            for(let val of strVar){
                //code 
            }

        it helps us to iterate on some special datatype (Strings and array ).
        code example :
            let fullName = "Binod";
            for(let i of fullName){ // iterator --> character
                console.log(i);
            }

        code example :
            calculate   the length of a string ?

            let fullName = "Binod";
            let size = 0 ;
            for(let i of fullName){
                console.log(i);
                size += 1 ;
            }
            console.log("String length is : ",size);  

    for in loop .
    --------------
    Syntax:
        for ( let key in objVar){
            // code 
        }

    code example :
        let Student = {
        name : "binod",
        age : 24,
        cgpa : 7.8,
        ispass : true,
    }

    for ( let key in Student){
        console.log(" Keys : ",key, "value : ",Student[key]);
    }

Practice Question :
-------------------
Q1. Print all the evan number from 0 to 100.

    for (let i = 0 ; i <= 100 ; i++){
    if (i % 2 == 0){
        console.log(i);
        }
    }

Q2 create a game where you start with any random game number 
Ask the user to keep guessing the number until the user enters the correct value 

codeexample:
    let cnumber = Math.floor(Math.random() * 10);
    let usernumber = prompt("Enter a number from 0 to 10");
    while(usernumber != cnumber){
        usernumber =prompt("Wrong !!")
    }


String in js :
----------------
string is a sequence of character used to represent text
ex :
    let st = "hello i am Binod ";

code Example:
    let st = " hello india ";
    let str2 = 'hello usa';
    console.log(st,str2);

Strings has some inbuilt properties and some inbuild functions 

inbuild function are called as methods.

some inbuilt properties :
    -> length :
        syntax :
            string variable.length
        code example :
            let st = " hello india ";
            let str2 = 'hello usa';

            console.log(st,str2);
            console.log(st.length);

    accessing the individual element of a string element .
    -------------------------------------------------------
    ex:    string [position]

        string index starts from the 0 goes to string.length-1

        //strings

        let st = " hello india ";
        let str2 = 'hello usa';

        console.log(st,str2);
        console.log(st.length);
        console.log(st[0]);

    Template literls in js :
    ---------------------------
        A way to have embedded epression in the string 
        //template leterals 
        let sentence = ` this is a template literals `;
        // this is a special string 
        console.log(sentence);      

        there is a question arise that if we can create a stirng using single and double quote why there is need to create a string like using backtic ?

        code example :
            let obj = {
            item : "pen",
            price : 23
        }

        console.log("the cost of ",obj.item,"is ",obj.price);

        // using backtic 

        console.log(` the cost of ${obj.item} is ${obj.price}`); 


    String interpolation :
    --------------------------
        to create a string by doing substitution of placeholder 

        Syntax:
            ` string text ${Expression} string text` 
        code example :
            num1 = 23;
            num2 = 34;
            console.log(`the addition of  num1 and num2 is ${num1 + num2}`);

    escape character 
    ----------------------
    \n is used to make anothe line form the single line 
    \t -> gives you the tab space 

    but it doesnot count in the string length method
    num1 = 23;
    num2 = 34;
    console.log(`the addition of \n num1 and num2 is ${num1 + num2}`);


    String Methods (functions) :
    ----------------------------
        This is a builtin function to manupulate a sring 
        -> str.toUpperCase()
        -> str.toLowerCase()
        -> str.trim() // remove whitespaces from both right and left side  

        String is a immutable ( cant change )

    code example :
        //String Methods :

        //str.toUpperCase();

        str = "hello Binod ";
        str2 ="            binod     kumar     kar       "
        upper = str.toUpperCase();

        console.log(upper);

        //str.toLowerCase();

        console.log(str.toLowerCase());

        // str.trim();

        console.log(str2.trim(), `length of string is : ${str2.length}`);



    str.slice(start,end)// return part of string 
    -----------------
    code example:
        let str = "012345";
    console.log(str.slice(2,6));

    here ending index number is optional if you wont give the last index number it will count from the given index number to till last .

    Concatination :
    ----------------
    str.concat(str2); // str2 with str
    code example:
        let fname = "binod ";
        let lname = "Kumar";
        console.log(fname.concat(lname));
        console.load(fname + lname );
    
    this the concat function which doing the concatination between two string but in javascript we can 
    concatinate thr two string using + operator 

    let res = fname + 123;
    console.log(`resut of adding number to the string is : ${typeof(res)} and the result is ${res}`);

    if we add number to the string it will become string 

    Replace methods
    ------------------
    str.replace(searchVal , newVal)
        if i have writen a tring abcdefg and i want to search the value cde and i want to replace cde to xyz the the replace method came to action 

    code example
        let st = "hello";
        console.log(st.replace("h","m"));
        console.log(st.replace("llo",123));
        console.log(st.replace("hello","come here "));

    charAt method
    -----------------
        str.charAt(idx);
        -> idx ----> index
    if you want to findout or return the perticular index value . 

    code example :
        let st = "hello";
        console.log(st.charAt(0));

    if you want to do any changes in original string 
    then you have to create a new string without creating new string you cant change any value 
    because string are immutable 

    code example
        let st = "hello";
        st[0] = 6;
        console.log(st); // it wont change to 6ello

        to do same 

        code example :
            let st = "hello";
            st = st.replace("h",6);
            console.log(st);


    
    String practice Question :
    -----------------------------
    Q1. Prompt the user to enter their name .Generate a user name for them based on the input.
    start user name with @ , followed y their fullname and ending with the full name length .

    eg : user name = "binodkumar", username should be @binodkumar10   

    code solution :
        let fullName = prompt ("Enter your full name without spaces ");
        let username = "@" + fullName + fullName.length;
        let username2 = `@${fullName}${fullName.length}`;
        console.log(username2);
        console.log(username);

--------------------------------------------------------------------------------------------------------------------------
chapter 4:
____________
Array in js :
-----------------
    ->  array is a colection of items .
    -> array element start from index no 0
    -> array element separated by comma(,)
    -> it is a linear way to creat an array ( single line )
    -> array is a object type. 
    -> array stores the value in the form of key and value form but here key is index number of the perticular value .
    example :
        let hero =["ironman","hulk","thor","captain"];
        let mark = [96,76,78,56,45];
        let info = ["Rahul",86,"Delhi"];

    code example:
            
    let marks = [76,76,45,54,86];
    let hero =["ironman","hulk","thor","captain"];
    console.log(marks);
    console.log(marks.length);
    console.log(hero);
    console.log(typeof(marks));

    Array Indices (plural form of index):
    ---------------------------------------
        to access the element in the array we can write the following syntax :
            arrray name [index number];
            example :
                marks[2];
    code example :
        let marks = [76,76,45,54,86];
        let hero =["ironman","hulk","thor","captain"];
        console.log(marks);
        console.log(marks[2]);
    
    if you are trying an index which is not exist then it will come as undefined 

    How to cahange the value of an array :
        code example :
            let marks = [76,76,45,54,86];
            let hero =["ironman","hulk","thor","captain"];
            console.log(marks);
            marks[0] = 22;
            console.log(marks);

    this way we can change the value of an array but it is not applicable in string . incase of string we can replace value we want to change . or we can store the in new variable 

    code example :
        let a = "hello";
        a[0]="Y";
        console.log(a);
        let b = a.replace("h","Y");
        console.log(b);

    This define array is a mutable .

    Looping over an array :
        -> suppose we have 1000 of array element it is hard to display all by printing individual element , to overcome this situation we have a concept of looping over array .

        -> prints all the array element in a single go.

        -> we can use for loop , while loop and also do while loop in the array to print all the value .

        -> in for loop we are going to use length property 

    code example :
        
        let marks = [76,76,45,54,86];
        let hero =["ironman","hulk","thor","captain"];

        for(let mark = 0 ; mark < marks.length ; mark++){
        console.log(mark);// this is the loop or the index number 
        console.log(marks[mark]);
        }

        using for of loop:
            console.log("--------------")
            for(let el of marks){
            console.log(el);
            }
            console.log("--------------")
            for(let el of heros){
            console.log(el.toUpperCase());
            }

        using for in loop:
            for(let el in marks){
            console.log(marks[el]);
            }


        using while loop :
            let i = 0;
            while(i<marks.length){
            console.log(marks[i]);
            i++;
            }

Practice Question :

Q. for a given array with marks of student --> [34,56,78,54,67] find the average marks of the object 

code solution :
    let marks = [34,56,78,54,67];
    let total = 0;
    for(let el of marks){
    total += el ;
    }
    let average = total/marks.length; 
    console.log(`total number is : ${total} and average is : ${average}`);


Q. for given array with the price of five item --> [250,400,300,200,100] all item have an offer of 10% off on them . change the array to store final price after applying offer.

using for of loop :
    let items = [250, 400, 300, 200, 100];
    let index = 0;
    for (val of items) {
    let offer = val / 10;
    items[index] = items[index] - offer;
    index++;
    }
    console.log(items);

using for loop only :
    let items = [250, 400, 300, 200, 100];
    for (let i = 0; i < items.length; i++) {
    let off = items[i] / 10;
    items[i] -= off; // item[i] = item[i] - off;
    }
    console.log(items);



Array methods :
    push() : add to the end .
    pop()   : delete from end and return.
    toString()  : convert array to string.

    there are some method which make changes inthe original array and there are some the just create anew array 

    push() : add the items at the end
    ----------------------------------- 

    code example :
        let foodItems = ['apple','mango','guava'];
        foodItems.push('banana',"pinapple");
        console.log(foodItems); // added in the end it change the original array 

    pop() :
        it delete items of any array from the last and return the deleted item .

        code example :
             let foodItems = ['apple', 'mango', 'guava'];
            foodItems.push('banana', "pinapple");
            console.log(foodItems); // added in the end it change the original array 

            let deletedItem = foodItems.pop();
            console.log(foodItems);
            console.log(deletedItem);

        pop() doesnt take any parameter it always delete items form the last 

    toString()  : convert array to string.

    it returtn new string insted of changing the original string 


    Array Concat method :

    concat() : this method joints multiple array and return result 
    unshift() : add to start 
    shift() : delete from start and return


    concat(): this method is used to concat multiple array  and return the result : it doesnot change the original array 
    ----------------------------------------------

    code example :
        let marvel = ["thor", "spideman", "ironman"];
        let dc = ["superman", "batman", "flash"];

        let hero = marvel.concat(dc);
        console.log(hero);

    unshft and shift method :
        both works as push and pop method respectively in case of this unshift and shift method start working from the first index number of any array .

    
string slice method :
---------------------
    slice() : return piece of an array .
    syntax : slice (startindex , endindex )

    -> it doesnot changes inthe original array 

    let marvel = ["thor", "spideman", "ironman", "dr strange"];
    let dc = ["superman", "batman", "flash"];

    console.log(marvel);
    let sliced = marvel.slice(1, 3); // it doesnot count the last index given by the user // in this case it will only  do slice from index number 1 to index number 2 only 

    console.log(sliced);
    console.log(marvel.slice(1)); // it will print allthe item fromthe index number 1 to end ,
    console.log(marvel.slice()); // it wil print originally array 

    some time we can use slice method to copy our array 

String Splice method :
=======================
    changes the original array (add, remove , replace )
    it takes three parameter 

    first parameter will ask where to start the splice method , second parameter will ask how many items you want to delete , third parameter will ask if you want to replace or not.

    code example :
        let marvel = ["thor", "spideman", "ironman", "dr strange"];
        let dc = ["superman", "batman", "flash"];

        console.log(marvel);
        marvel.splice(2, 1); // it will delete the one item from the index number 2 , which is that index number 2 so ironman got deleted.
        console.log(marvel);
        marvel.splice(1, 2); // here it will start from the index number one which is spirderman and two item to delete it did delete spiderman and dr strange ,  so only left thor 
        console.log(marvel);
        marvel.splice(2, 2, "Hulk"); //  here it started form index number2 if doesnot exist it s okey , replace a items as hulk 
        console.log(marvel);


Practice Question :
--------------------    
    Q . Create an array to store companies ---> "microsoft","google","IBM","amazon","facebook",

    a> remove the first company from the array 
    b> remove the ubber and add ola in its place 
    c> add infosys at the end 

    code example:
        let company = ["Microsoft", "Amazon", "Facebook", "Ubber", "IBM"];

        console.log(company);

        // delete the first company from the array 
        company.splice(0, 1); // deleted first comany 
        console.log(company);

        // Remove the Uber and add Ola 

        company.splice(2, 1, "Ola");
        console.log(company); // successfully Uber replcaed with Ola 

        // add an company name called tesla at the end 

        company.splice(4, 0, "Tesla");
        console.log(company);

Chapter 5 :
---------------------------
______________________________________________________________|
function :                                                    |
______________________________________________________________|
javascript functions :
    -> block of code that perform a specific task , can be invoked whenever needed 

when we write a function we use () (parathesis)
example of function :
    console.log("hello");
    console.log("abc".toUpperCase());

    here log() and toUpperCase() are all function
    these all are predefined function 
    we can create our custom function 



how to write a function in javascript :
    there are two process by which we can create a function 
    1> function definition 
    2> function call 

    Function definition :
    ------------------------
        Syntax :
            function functionName(){
                //do some work ;
            }
    after defigning the function we have to call the function 
    2> function call 
    -------------------
        functionName();

code example :
    function myFunction() { // creation of function here or definition of function 
    console.log("welcome to aspireideas ");
    console.log(" we are learning javascript ");
    }

    myFunction(); //function invoke or function call 
    // how many times you callthe function that many time it will print the two statement inside the function 

    myFunction();
    myFunction();


types of function there are two type of function 
--------------------------------------------------
1> user defined
2> pre defined

1> Pre defined function are example : .log(),toUpperCase(),splice(),slice() etc 

2> User defined :
--------------
    user defined function further devided into four parts 
    1>  no return type with no parameter :
    --------------------------------------
        this function doesnot return anything nor it has parameter 
        
    code example :
        function myFun(){ // no parameter it is taking 
            a = 12 ;
            b = 34;
            console.log(a+b); // it is not returning anything 

        }
        myFun();

    2> no return type with parameter :
    -------------------------------------
    this function will not return anythong but it has some parameter 
    inthis function when you ara calling the function that time you have to pass arguments 
    code example :
        function msg(message){
            console.log(message);
        }
        msg("hello India " );

    we can take multiple parameter and pass multiple arguments

    code example :
        calculate the addition of two number 
        function add(a, b) {
        res = a + b;
        console.log(res);
        }
        add(3, 6);

    when we have to add two number simple we can call this add function.

-> function with return type without parameter :
-------------------------------------------------
    in this type of function to display the retun value we need to print the function . like bellow 

    in this type function you can return only one statement.but you can write multiple return statement in condition 

    in return type function we the text youy have written after the return statement is useless  

    function myFun(){
        return ("hello welcome to India");
    }
    let str = myFun();
    console.log(str) // this way we can print the function return value 

    console.log(myFun()); // this is also a way tp print the function return value 


-> function with return type with parameter :

    codeexample :
        function myFun(a,b){
        return a + b; // here a and  b are local variable 
        return a - b // this line will not execute because the interpriter will not able to reach to the line 

        console.log(a); // here it will print the local variable a ;
        }
        let result = myFun(3,6);
        // console.,log(a) // error
        console.log(myFun(899,344));
        console.log(result);


ES6 Arrow function:
------------------------
    compact way of writing a function :
        const functionName = (prameter1, parameter2)==> {
            //do some work ;
        }
    
    // Normal function 
    function sum(a, b) {
    return a + b;
    }
    console.log(sum(234, 567));

    // arrow function we can write same code 

    const add = (a, b) => { return a + b };
    console.log(add(34, 56));

    const printhello()=>{"hello India};

lets practice :

Q. create a function using function keyword that takes a string as an argument and retrun the number of vowel in the string 

code solution :

function countVowels(str) {
  str = str.toLowerCase();
  let count = 0;
  for (element of str) {
    if (element === 'a' || element === 'e' || element === 'i' || element === 'o' || element === 'u') {
      count++
    }
  }
  console.log(count);
}
countVowels("Aeiou");

the second way :
----------------
function countVowels(str) {
  str = str.toLowerCase();
  let vowels = 'aeiou'
  let count = 0;
  for (element of str) {
    for (v of vowels) {
      if (element === v) {
        count++;
        break;
      }
    }
  }
  console.log(count);
}
countVowels("binod");


Q2 do same task using arrow function

const countVowelsArrowf = (str) => {
  str = str.toLowerCase();
  let vowels = 'aeiou'
  let count = 0;
  for (element of str) {
    for (v of vowels) {
      if (element === v) {
        count++;
        break;
      }
    }
  }
  console.log(count);
}
countVowelsArrowf("binod");


for each Loop in array :
----------------------------
    arr.forEach(callback function )
    callbackFunction => here it is a function  to execute for each element in the array 

 ==> A callback is a function passed as an argument to another function 

    arr.forEach((val)=> {
        console.log(val);
    })

difference between method and function :
---------------------------------------
    method is a function but it is always associated with a object 

    function is a block of code when it is called it executed 

code example for  forEach loop in string and callback function :

arr= [12,22,33,44,55,66,77,88];
arr.forEach(function myfun(val){ // value at each index 
  console.log(val);
});

city =["mumbai","chennai","delhi","kanpur"]
city.forEach((cityName)=>{
  console.log(cityName.toUpperCase());
})

arr= [12,22,33,44,55,66,77,88];
arr.forEach(function myfun(val, idx, arr){ // value at each index 
  console.log(val, idx , arr);
});

Interview question what is higher order function/method 
----------------------------------------------------
higher order function are those function  who either takes another function as parameter , or return a function 


example of higher order function :
    for each loop is called as higher order function/method;


Practice question :
Q. for given array of number print the square of each value 
and make a array of that .

code solution :
    var arrNumber = [4, 5, 6, 7];
    var squareArrNumber = [];
    arrNumber.forEach((element) => {

    let squareElement = element * element; // element ** 2
    console.log(squareElement);
    squareArrNumber.push(squareElement);
    })
    console.log(squareArrNumber);
    console.log(typeof (squareArrNumber));


    var arrNumber = [4, 5, 6, 7];
    var squareArrNumber = [];

    let calcSquare = (element) => {
    let squareElement = element ** 2;
    console.log(squareElement);
    squareArrNumber.push(squareElement);
    }  // our arrow function inside a viraibale 


    arrNumber.forEach( calcSquare) // we are passing that variable 
    console.log(squareArrNumber);
    console.log(typeof (squareArrNumber));


Some more array method :
    Map :
        create a new array with the result of some operation the value its callback return are used to form a new array 

        arr.map(callbackFnx(value,index, array))

        Syntax :
            let newArr = arr.map((val)=>{
                return val*2;
            }) 

    map method is quite similar as forEach 
    difference map return us  a new array with the result

    we can use three parameter in the map value , index, array

    hero =  ["ironMan","thor","hulk","captainAmerica"];
    numArray = [12,4,5,6,3];
    let arrVal = (val) => {
    console.log(val);
    }
    let calcSquare = (val)=> {return val ** 2 };
    hero.map(arrVal);
    newArray = numArray.map(calcSquare);
    console.log(numArray);
    console.log(newArray);

best definition of map :
----------------------------
    map is used to create a new array using some returned value based on each value stored in individual indices of an array 


Filter method :
    create a new array of element that gives true for condition filter
    eg: all even number 

    let newArray = arr.filter((val)=> {retun val%2==0;}) 

    code example using filter method find allthe even number form the given array 

    let arr = [1,2,3,4,5,6,7,8,9];
    let evenNumber = (value)=> {
    return (value % 2 == 0);
    }
    let newArr= arr.filter(evenNumber);
    console.log(newArr);


    code example 2 :

    let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9,];
    let evenNumber = (value) => {
    //return (value % 2 == 0); // condition for finding the evne number 
    return (value > 5); // condition given the find the element those are greater than five 
    }
    let newArr = arr.filter(evenNumber);
    console.log(newArr);

    var x = document.getElementById('heading_text').innerText;
    console.log(x);

    
javascript reduce method :
-------------------------
    perform some operation and reduce the array to a single value . it return the single value 

    calculate the total sum of elements present in the array
    code solution :
        reduce function takes two parameter 1> accumulotor 2> current value 

    code example :
        arr = [1, 2, 3, 4];
        const output = arr.reduce((res, curr) => {
        console.log(res , curr);
        
        return res + curr;
        })
        console.log(output);  

    how reduce method works :
        now i have 1,2,3,4 elements in my array now from starting 
        my res = 1, and my curr = 2 ;
        what it does it addes the res and curr it become 3 and the value will store in the res 
        now the res = 3 and the curr = 3 the it will add the value will be 6 it will store inside res 

        now re s= 6 curr = 4 then it add and return the output as 6 + 4 = 10 10 is the output this way the reduce function works 

        we can write prev insted of res 

Q. find the largest number from an array of 5 random number 

    arrNumber = [67,78,34,27,45];
    let largest = arrNumber.reduce((prev,curr)=> {
    return prev > curr ? prev : curr;
    })
    console.log(largest);

Q. we have given array of marks of student , filter out the mark s of student that scored more tan 90

code solution :
    let marks = [87,67,94,92,67,97];

    let topmarks = marks.filter((val)=> {
    return val > 90;

    })
    console.log(topmarks);

Q. Take number n as input from user create an array of number s from 1 to n ;
code example :  

    let n = prompt("Enter an number ");
    let arr =[]
    for(let i = 1; i<=n ; i++)
    {
    arr[i-1] = i;
    }
    console.log(arr);

Q. use the reduce method to calculate sum of all number from 1 to n;
code solution :
    let n = prompt(":Enter a number ");
    arr = []
    for (let i = 1 ; i<=n ; i++)
    {
    arr[i-1] = i;
    }
    console.log(arr);

    // use reduce method to add the sum of the element inside the array

    let summation = arr.reduce((prev,curr)=> {
    return prev + curr;
    })
    console.log(summation);

Q. use reduce method to find the product of all number present inside the array 

code solution :
    let n = prompt(":Enter a number ");
    arr = []
    for (let i = 1 ; i<=n ; i++)
    {
    arr[i-1] = i;
    }
    console.log(arr);

    // use reduce method to add the sum of the element inside the array

    let summation = arr.reduce((prev,curr)=> {
    return prev + curr;
    })
    console.log("sum = ",summation);

    // use the reduce method to calculate product of all number in the array 
    let retProduct = (prev,curr) => {
    return prev * curr; 
    }
    let product = arr.reduce(retProduct);

    console.log("factorial = ",product);
